name: Version and Release

on:
  push:
    branches:
      - main  # or your default branch name

jobs:
  version-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Get commit messages since last tag
        id: get_commits
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s%n%b")
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          CURRENT_DATE=$(date +%Y-%m-%d)
          
          # Create temporary files
          TEMP_CHANGELOG="temp_changelog.md"
          echo "# Changelog" > $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          echo "All notable changes to this project will be documented in this file." >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/)," >> $TEMP_CHANGELOG
          echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          
          # Add Unreleased section
          echo "## [Unreleased]" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          echo "### Added" >> $TEMP_CHANGELOG
          echo "- List new features here" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          echo "### Changed" >> $TEMP_CHANGELOG
          echo "- List changes in existing functionality here" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          echo "### Deprecated" >> $TEMP_CHANGELOG
          echo "- List soon-to-be removed features here" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          echo "### Removed" >> $TEMP_CHANGELOG
          echo "- List now removed features here" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          echo "### Fixed" >> $TEMP_CHANGELOG
          echo "- List any bug fixes here" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          echo "### Security" >> $TEMP_CHANGELOG
          echo "- List security fixes here" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          
          # Add new version section with commit messages
          echo "## [$NEW_VERSION] - $CURRENT_DATE" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          
          # Process commit messages
          COMMITS="${{ steps.get_commits.outputs.commits }}"
          
          # Initialize sections
          echo "### Added" >> $TEMP_CHANGELOG
          echo "$COMMITS" | grep -i "^feat:" | sed 's/^feat:/- /' >> $TEMP_CHANGELOG || echo "- No new features" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          
          echo "### Changed" >> $TEMP_CHANGELOG
          echo "$COMMITS" | grep -i "^chore:" | sed 's/^chore:/- /' >> $TEMP_CHANGELOG || echo "- No changes" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          
          echo "### Fixed" >> $TEMP_CHANGELOG
          echo "$COMMITS" | grep -i "^fix:" | sed 's/^fix:/- /' >> $TEMP_CHANGELOG || echo "- No fixes" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          
          echo "### Security" >> $TEMP_CHANGELOG
          echo "$COMMITS" | grep -i "^security:" | sed 's/^security:/- /' >> $TEMP_CHANGELOG || echo "- No security updates" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          
          # Add breaking changes if any
          if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            echo "### Breaking Changes" >> $TEMP_CHANGELOG
            echo "$COMMITS" | grep -A 1 "BREAKING CHANGE" | sed 's/BREAKING CHANGE:/- /' >> $TEMP_CHANGELOG
            echo "" >> $TEMP_CHANGELOG
          fi
          
          # Append existing changelog content
          if [ -f "CHANGELOG.md" ]; then
            # Skip the header and unreleased section
            tail -n +$(grep -n "^## \[[0-9]" CHANGELOG.md | head -n 1 | cut -d: -f1) CHANGELOG.md >> $TEMP_CHANGELOG
          fi
          
          # Replace the original changelog
          mv $TEMP_CHANGELOG CHANGELOG.md
          
          # Commit the updated CHANGELOG.md
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG.md for version $NEW_VERSION"
          git push

      - name: Bump version
        id: bump_version
        uses: phips28/gh-action-bump-version@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          minor-wording: 'feat:'
          major-wording: 'BREAKING CHANGE'
          patch-wording: 'fix:'
          version-file: 'package.json'
          commit-message: 'chore: bump version to {version}'
          tag-prefix: 'v'

      - name: Build package
        run: npm run build

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/**/*
          generate_release_notes: true
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 